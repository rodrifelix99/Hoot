desc "Flutter Commands"
private_lane :flutter do |options|
  error_message = "Command and name are mandatory options for the flutter lane"
  UI.user_error!(error_message) unless options[:command] && options[:name]
  on_error = proc do |error|
      UI.user_error!("#{options[:name]} failed.")
    end
    start="fvm flutter"
    sh("#{start} #{options[:command]}", step_name: options[:name], error_callback: on_error)
end

private_lane :increment_build_number_in_pubspec do
  pubspec_path = "./../pubspec.yaml"
  pubspec_content = File.read(pubspec_path)

  # Find the current build number
  current_build_number = pubspec_content.match(/version:\s*\d+\.\d+\.\d+\+(\d+)/)[1].to_i

  # Find the current minor version number x.y.z -> z
    current_minor_version = pubspec_content.match(/version:\s*\d+\.\d+\.\d+\+(\d+)/)[0].split(".")[2].split("+")[0].to_i

  # Increment the build number
  new_build_number = current_build_number + 1

    # Increment the minor version number
    new_minor_version = current_minor_version + 1

  # Replace the old build number with the new one
  new_pubspec_content = pubspec_content.gsub(/version:\s*\d+\.\d+\.\d+\+\d+/, "version: 1.3.#{new_minor_version}+#{new_build_number}")

  # Write the updated content back to the pubspec.yaml file
  File.write(pubspec_path, new_pubspec_content)

  # Run the flutter pub get command
    flutter(command: "clean", name: "Flutter clean")
    flutter(command: "pub get", name: "Pub Get")

  UI.message("Incremented build number to version x.y.#{new_minor_version}+#{new_build_number}")
end

before_all do |lane|
    if lane != :deploy_firebase && lane != :setup_app_metadata
        increment_build_number_in_pubspec
    end
end

desc "Build to iOS"
lane :build_ios do
    flutter(command: "build ipa --release --verbose", name: "Build")
end

desc "Build to Android"
lane :build_android do
    flutter(command: "build appbundle --release --verbose", name: "Build")
end

desc "Deploy to App Store and Play Store"
lane :deploy do
    deploy_google_play
    #deploy_huawei
    deploy_ios
end

desc "Deploy to Google Play Store"
lane :deploy_google_play do |options|
    build_android
    upload_to_play_store(
         json_key: 'fastlane/iam_admin.json',
         aab: 'build/app/outputs/bundle/release/app-release.aab',
         package_name: 'com.hoot.app.hoot'
    )
end

desc "Deploy to Huawei AppGallery"
lane :deploy_huawei do |options|
  huawei_appgallery_connect(
    client_id: "1587273842953344960",
    client_secret: "17F9117853BB8ACBCAC0319FD1535EC102B2F7B70B34979B0E4CE6AAA99025FD",
    app_id: "113163357",
    apk_path: 'build/app/outputs/bundle/release/app-release.aab',
    is_aab: true,
    submit_for_review: true,
    privacy_policy_url: "https://twisty-captain-6ee.notion.site/Terms-and-Conditions-10f6601b812180acabc2e5719fee7092?pvs=4"
  )
end

desc "Setup App Metadata"
lane :setup_app_metadata do
  huawei_appgallery_connect_get_app_info(
    client_id: "1587273842953344960",
    client_secret: "17F9117853BB8ACBCAC0319FD1535EC102B2F7B70B34979B0E4CE6AAA99025FD",
    app_id: "113163357"
  )
end

desc "Deploy iOS "
lane :deploy_ios do
    build_ios
    upload_to_app_store(
        api_key_path: "./fastlane/apple_api_key.json",
        app_identifier: "com.hoot.app.hoot",
        ipa: "./build/ios/ipa/hoot.ipa",
        team_id: "125395078",
        submit_for_review: true,
        automatic_release: true,
        force: true,
        metadata_path: "./fastlane/metadata",
        skip_metadata: false,
        skip_screenshots: false,
        reject_if_possible: true,
        precheck_include_in_app_purchases: false,
    )
end

desc "Deploy to TestFlight"
lane :deploy_testflight do
    build_ios
    upload_to_testflight(
        api_key_path: "./fastlane/apple_api_key.json",
        app_identifier: "com.hoot.app.hoot",
        ipa: "./build/ios/ipa/hoot.ipa",
        team_id: "125395078",
        skip_waiting_for_build_processing: true,
        distribute_external: false,
        groups: "Internal"
    )
end
